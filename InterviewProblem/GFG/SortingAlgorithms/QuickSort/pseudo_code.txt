==============================================================================================================

3 Way Quick Sort based on Dutch National Flag Algorithm.
Consider an array which has many redundant elements.. For example: {1, 4, 2, 4, 4, 1, 2, 4, 1, 2, 4, 1, 2, 2, 2, 2, 4, 1, 4, 4, 4}
If 4 is picked as pivot in Simple QuickSort, we fix only one 4 and recursively process remaining occurences.
Process all occurrences of pivot and is based on <u>Dutch National Flag algorithm</u>

In 3 way QuickSort, an array arr[l..r] is divided in 3 parts:
a) arr[l..i] elements less that pivot.
b) arr[i+1..j-1] elements equal to pivot.
c) arr[j..r] elements greater than pivot.


================================================================================================================
Avg: O(nLogn)
Worst: O(n^2)
Best: O(nLogn)

/* low --> Starting index, high --> Ending index */
quickSort(arr[], low, high) {
	if(low < high) {
		/* pi is partitioning index, arr[pi] is now at right place */
		pi = partition(arr, low, high);
		
		quickSort(arr, low, pi - 1); // before pi
		quickSort(arr, pi + 1, high); // after pi
	}
}

/* Partition ALgorithm
There can be many ways to do partition, following pseudo code adopts the method given in CLRS book.

Start from the leftmost element and keep track of index of smaller (or equal to) elements as i.
White traversing, if we find a smaller element, we swap current element with arr[i]
Otherwise we ignore current element
*/

/* This function takes last element as pivot, places the pivot element at its correct position in sorted array,
and places all smaller (smaller than pivot) to left of pivot
and places all greater (greater than pivot) elements to right of pivot */
partition (arr[], low, high) {
	// pivot (Element to be placed at right position)
	pivot = arr[high];
	
	i = (low - 1) // Index of smaller element
	
	for (j = low; j <= high - 1; j++) {
		// if current element is smaller than or equal to pivot
		if (arr[j] <= pivot) {
			i++; // increment index of smaller element
			swap arr[i] and arr[j]
		}
	}
	swap arr[i + 1] and arr[high]
	return (i + 1)
}

/* Analysis of Quicksort */
Time taken by QuickSort in general can be written as:
T(n) = T(k) + T(n-k-1) + theta(n)

k: number of elements which are smaller than pivot.
T(k) and T(n-k-1) are for two recursive calls.
theta(n) is for partition process.

Time taken depends upon input array and partition strategy. 3 cases:

1. Worst Case: Occurs when the partition process always picks greatest or smallest element as pivot.
T(n) = T(0) + T(n-1) + theta(n)
T(n) = T(n-1) + theta(n)
Solution to above recurrence is theta(n^2).

2. Best Case: Occurs when the partition process always picks the middle element as pivot.
T(n) = 2T(n/2) + theta(n)
Solution to above recurrence is theta(n * Log n)

3. Average Case: To do average case we need to consider all possible permutation of array and calculate time taken by every permutation which doesn't look easy.
We can get an idea of average case by considering the case when partition puts O(n/9) elements in one set and O(9n/10) elements in other set. Following is recurrence:
T(n) = T(n/9) + T(9n/10) + theta(n)
Solution of above recurrence is O(n * Log n)

Worst case time complexity of QuickSort is O(n^2) which is more than many other sorting algorithms like Merge Sort and Heap Sort, QuickSort is faster in practice, because its inner loop can be efficiently implemented on most architectures, and in most real world data. Can be implemented in different ways by changing the choice of pivot, so that the worst case rarely occurs for a given type of data.

Merge Sort is generally considered better when data is huge and stored in external storage.

Stable? Default implementation is not stable. However, any sorting algorithm can be made stable by considering indexes as comparison parameter.
=================================================================================================================================
